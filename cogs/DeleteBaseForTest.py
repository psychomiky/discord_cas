import disnake
from disnake.ext import commands
import logging
import asyncio

from utils.database import get_pool, init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É
ALLOWED_USER_ID = 852873937917968405


class DatabaseClearCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info("Initialized DatabaseClearCog")

    async def drop_and_recreate_schema(self) -> bool:
        """
        –£–¥–∞–ª—è–µ–º –≤—Å—é —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É public (—Å–æ –≤—Å–µ–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏),
        –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—ë–º –µ—ë –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–∑—ã–≤–∞–µ–º init_db() –¥–ª—è –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü.
        """
        try:
            pool = await get_pool()
            async with pool.acquire() as conn:
                # –í—ã–ø–æ–ª–Ω—è–µ–º DROP/CREATE SCHEMA –≤–Ω—É—Ç—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ aiopg
                async with conn.cursor() as cur:
                    # 1) –£–¥–∞–ª—è–µ–º —Å—Ö–µ–º—É public –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
                    await cur.execute("DROP SCHEMA public CASCADE;")
                    logger.info("–°—Ö–µ–º–∞ public —É–¥–∞–ª–µ–Ω–∞")

                    # 2) –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ö–µ–º—É public
                    await cur.execute("CREATE SCHEMA public;")
                    logger.info("–°—Ö–µ–º–∞ public —Å–æ–∑–¥–∞–Ω–∞")

                # –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ async with conn.cursor()
                logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ö–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            # 3) –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ init_db()
            await init_db()
            logger.info("–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ init_db")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ö–µ–º—ã –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏: {e}")
            return False

    @commands.command(name="clear_database", aliases=["cleardb"])
    async def clear_database(self, ctx: commands.Context):
        """
        –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–æ–≤).
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—ë—Ç –∏—Ö.
        """
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î –≤—ã–∑–≤–∞–Ω–∞: user={ctx.author.id}, channel={ctx.channel.id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ ALLOWED_USER_ID –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å
        if ctx.author.id != ALLOWED_USER_ID:
            embed = disnake.Embed(
                title="üö´ –û—à–∏–±–∫–∞",
                description=f"<@{ctx.author.id}>, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: user={ctx.author.id}")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        embed = disnake.Embed(
            title="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            description=(
                f"<@{ctx.author.id}>, –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å **–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã** –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º—ã PostgreSQL.\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏–≥—Ä—ã, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Ç.–¥.).\n\n"
                "**–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ** `.confirm_drop_database` **–≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.**"
            ),
            color=0xFF0000
        )
        await ctx.send(embed=embed)
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç user={ctx.author.id}")

        def check(m: disnake.Message):
            return (
                m.author.id == ctx.author.id and
                m.channel.id == ctx.channel.id and
                m.content == ".confirm_drop_database"
            )

        try:
            await self.bot.wait_for("message", check=check, timeout=30.0)
        except asyncio.TimeoutError:
            embed = disnake.Embed(
                title="üö´ –û—Ç–º–µ–Ω–∞",
                description=f"<@{ctx.author.id}>, –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ.",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ë–î –æ—Ç–º–µ–Ω–µ–Ω–∞: user={ctx.author.id} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        success = await self.drop_and_recreate_schema()
        if success:
            embed = disnake.Embed(
                title="üßπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞",
                description=(
                    f"<@{ctx.author.id}>, –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏ –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞–Ω—ã. "
                    "–°—Ö–µ–º–∞ –ø—É—Å—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
                ),
                color=0x00FF00
            )
            logger.info(f"–ë–î —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞: user={ctx.author.id}")
        else:
            embed = disnake.Embed(
                title="üö´ –û—à–∏–±–∫–∞",
                description=(
                    f"<@{ctx.author.id}>, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
                ),
                color=0xFF0000
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î: user={ctx.author.id}")

        await ctx.send(embed=embed)


def setup(bot: commands.Bot):
    bot.add_cog(DatabaseClearCog(bot))
    logger.info("DatabaseClearCog –∑–∞–≥—Ä—É–∂–µ–Ω")
