import disnake
from disnake.ext import commands
import random
import logging
import configparser
import os
import aiohttp

from utils.database import (
    get_user_balance,
    update_cash,
    get_user_inventory,
    remove_from_inventory,
    get_cock_fight_chance,
    update_cock_fight_chance
)
from config import currency, audit_webhook, make_audit_payload

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ games.ini
config = configparser.ConfigParser()
config_file = "games.ini"
if not os.path.exists(config_file):
    logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
config.read(config_file, encoding="utf-8")

def get_cock_fight_config():
    """–ß–∏—Ç–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CockFight –∏–∑ games.ini –æ–¥–∏–Ω —Ä–∞–∑."""
    section = config["CockFight"]
    min_bet = int(section.get("min_bet", 10))
    min_chance = int(section.get("min_chance", 50))
    max_chance = int(section.get("max_chance", 90))
    if min_bet < 1:
        raise ValueError("min_bet –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1")
    if not (0 <= min_chance <= max_chance <= 100):
        raise ValueError(
            "min_chance/max_chance –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0‚Äì100 –∏ min_chance ‚â§ max_chance"
        )
    return {
        "min_bet": min_bet,
        "min_chance": min_chance,
        "max_chance": max_chance,
        "errors": {
            "insufficient_cash": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!",
            "no_chicken": "–£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä–∏—Ü—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –±–æ—é!",
            "invalid_bet": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, 'all', 'half' –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç 1e6.",
            "min_bet": f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {min_bet} {currency}."
        }
    }

def create_win_embed(user: disnake.Member, winnings: int, chance: int, max_chance: int) -> disnake.Embed:
    embed = disnake.Embed(
        description=(
            f"<@{user.id}>, –≤–∞—à–∞ –∫—É—Ä–∏—Ü–∞ –ø–æ–±–µ–¥–∏–ª–∞! "
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ **{currency} {winnings:,}**! üêì"
        ),
        color=0x2F3136
    )
    embed.set_footer(
        text=f"–°–∏–ª–∞ –∫—É—Ä–∏—Ü—ã (—à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É): {min(chance + 1, max_chance)}%"
    )
    embed.set_author(
        name=user.display_name,
        icon_url=(user.avatar.url if user.avatar else user.default_avatar.url)
    )
    return embed

def create_loss_embed(user: disnake.Member) -> disnake.Embed:
    embed = disnake.Embed(
        description=f"<@{user.id}>, –≤–∞—à–∞ –∫—É—Ä–∏—Ü–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ –∏ –ø–æ–≥–∏–±–ª–∞ ü™¶",
        color=0x2F3136
    )
    embed.set_author(
        name=user.display_name,
        icon_url=(user.avatar.url if user.avatar else user.default_avatar.url)
    )
    return embed

def create_error_embed(msg: str, user_id: int) -> disnake.Embed:
    return disnake.Embed(
        title="–û—à–∏–±–∫–∞",
        description=f"<@{user_id}>, {msg}",
        color=0x2F3136
    )

class CockFightCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.cfg = get_cock_fight_config()
        self._session = None
        logger.info("CockFightCog initialized")

    def cog_unload(self):
        if self._session and not self._session.closed:
            self.bot.loop.create_task(self._session.close())

    async def _get_session(self) -> aiohttp.ClientSession:
        if self._session is None or self._session.closed:
            self._session = aiohttp.ClientSession()
        return self._session

    async def _send_audit(self, user_id: int, cash_change: int, bank_change: int, reason: str):
        payload = make_audit_payload(
            action="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            user_id=user_id,
            cash_change=cash_change,
            bank_change=bank_change,
            reason=reason
        )
        try:
            session = await self._get_session()
            await session.post(audit_webhook, json=payload)
        except Exception as e:
            logger.warning(f"Audit webhook error: {e}")

    async def validate_bet(self, user_id: int, guild_id: int, bet: str):
        """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 'all', 'half', –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∏ —Ñ–æ—Ä–º–∞—Ç 1e6."""
        cash, _ = await get_user_balance(user_id, guild_id)
        bet_l = bet.lower()
        if bet_l == "all":
            amount = cash
        elif bet_l == "half":
            amount = cash // 2
        else:
            try:
                if 'e' in bet_l:
                    amount = int(float(bet_l))
                else:
                    amount = int(bet_l)
            except ValueError:
                return None, "invalid_bet"
            if amount > cash:
                return None, "insufficient_cash"
        if amount < self.cfg["min_bet"]:
            return None, "min_bet"
        return amount, None

    async def deduct_bet(self, user_id: int, guild_id: int, amount: int) -> bool:
        cash, _ = await get_user_balance(user_id, guild_id)
        if cash < amount:
            return False
        await update_cash(user_id, guild_id, -amount)
        logger.info(f"–°–ø–∏—Å–∞–Ω–æ {amount:,} cash –¥–ª—è —Å—Ç–∞–≤–∫–∏: user={user_id}")
        return True

    async def has_chicken(self, user_id: int) -> bool:
        for item_id, qty, name, *_ in await get_user_inventory(user_id):
            if name == "Chicken" and qty > 0:
                return True
        return False

    @commands.command(name="cock-fight", aliases=["cf"])
    async def cock_fight(self, ctx: commands.Context, bet: str):
        user_id = ctx.author.id
        guild_id = ctx.guild.id
        logger.info(f"CockFight called: user={user_id}, bet={bet}")

        amount, err = await self.validate_bet(user_id, guild_id, bet)
        if err:
            await ctx.send(embed=create_error_embed(self.cfg["errors"][err], user_id))
            return

        if not await self.has_chicken(user_id):
            await ctx.send(embed=create_error_embed(self.cfg["errors"]["no_chicken"], user_id))
            return

        if not await self.deduct_bet(user_id, guild_id, amount):
            await ctx.send(embed=create_error_embed(self.cfg["errors"]["insufficient_cash"], user_id))
            return

        chance = await get_cock_fight_chance(user_id, guild_id)
        if chance is None:
            chance = self.cfg["min_chance"]
            await update_cock_fight_chance(user_id, guild_id, chance)

        roll = random.randint(1, 100)
        win = roll <= chance
        logger.debug(f"Fight roll={roll} vs chance={chance} => win={win}")

        if win:
            winnings = amount * 2
            new_chance = min(chance + 1, self.cfg["max_chance"])
            await update_cash(user_id, guild_id, winnings)
            await update_cock_fight_chance(user_id, guild_id, new_chance)

            await self._send_audit(
                user_id=user_id,
                cash_change=winnings,
                bank_change=0,
                reason="–ü–æ–±–µ–¥–∞ –≤ –∫—É—Ä–∏–Ω—ã—Ö –±–æ—è—Ö"
            )

            embed = create_win_embed(ctx.author, winnings, new_chance, self.cfg["max_chance"])
            logger.info(f"Victory: user={user_id}, +{winnings:,}, new_chance={new_chance}")

        else:
            chicken = next(
                (i for i in await get_user_inventory(user_id) if i[2] == "Chicken" and i[1] > 0),
                None
            )
            removed = False
            if chicken:
                await remove_from_inventory(user_id, chicken[0], 1)
                removed = True
                logger.info(f"Removed Chicken (item_id={chicken[0]}) for user={user_id}")
            else:
                logger.warning(f"No Chicken to remove for user={user_id}")

            await self._send_audit(
                user_id=user_id,
                cash_change=-amount,
                bank_change=0,
                reason="–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—É—Ä–∏–Ω—ã—Ö –±–æ—è—Ö"
            )

            await update_cock_fight_chance(user_id, guild_id, self.cfg["min_chance"])
            embed = create_loss_embed(ctx.author)
            logger.info(f"Defeat: user={user_id}, -{amount:,}, chicken_removed={removed}")

        await ctx.send(embed=embed)

def setup(bot: commands.Bot):
    bot.add_cog(CockFightCog(bot))
    logger.info("CockFightCog loaded")
